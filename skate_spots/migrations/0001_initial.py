# Generated by Django 4.2.18 on 2025-05-22 05:30

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import skate_spots.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zip_code', models.CharField(max_length=9, validators=[skate_spots.models.validar_cep], verbose_name='CEP')),
                ('street', models.CharField(max_length=250, verbose_name='Logradouro')),
                ('number', models.CharField(max_length=30, verbose_name='Número')),
                ('district', models.CharField(max_length=60, verbose_name='Bairro')),
                ('city', models.CharField(max_length=30, verbose_name='Cidade')),
                ('state', models.CharField(max_length=30, verbose_name='Estado')),
                ('country', models.CharField(max_length=30, verbose_name='País')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
            ],
        ),
        migrations.CreateModel(
            name='Modality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Nome')),
                ('description', models.TextField(max_length=250, verbose_name='Descrição')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('update_date', models.DateTimeField(auto_now=True, verbose_name='Data de Atualização')),
            ],
        ),
        migrations.CreateModel(
            name='SkateSpot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Nome')),
                ('description', models.TextField(max_length=250, verbose_name='Descrição')),
                ('lighting', models.BooleanField(verbose_name='Iluminacao Disponível?')),
                ('water', models.BooleanField(verbose_name='Água Disponível?')),
                ('bathroom', models.BooleanField(verbose_name='Banheiro Disponível?')),
                ('create_date', models.DateTimeField(verbose_name='Data de Criação')),
                ('location_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='skate_spots.location')),
            ],
        ),
        migrations.CreateModel(
            name='Structure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Nome')),
                ('description', models.TextField(max_length=250, verbose_name='Descrição')),
                ('modality_id', models.ManyToManyField(blank=True, to='skate_spots.modality')),
                ('skatespot_id', models.ManyToManyField(blank=True, to='skate_spots.skatespot')),
            ],
        ),
        migrations.CreateModel(
            name='SkateShop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Nome')),
                ('description', models.TextField(max_length=250, verbose_name='Descrição')),
                ('location_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='skate_spots.location')),
            ],
        ),
        migrations.CreateModel(
            name='SkateEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Nome')),
                ('description', models.TextField(max_length=250, verbose_name='Descrição')),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Data de Início')),
                ('end_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Data de Encerramento')),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Data de Criação')),
                ('location_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='skate_spots.location')),
            ],
        ),
        migrations.CreateModel(
            name='LocalImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='', verbose_name='Imagem')),
                ('main_image', models.BooleanField(default=False, verbose_name='Imagem Principal?')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('skateevent_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='skate_spots.skateevent')),
                ('skateshop_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='skate_spots.skateshop')),
                ('skatespot_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='skate_spots.skatespot')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to=skate_spots.models.user_profile_path)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
